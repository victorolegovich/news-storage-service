// Code generated by protoc-gen-go. DO NOT EDIT.
// source: news-storage-service.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NewsItem struct {
	ID                   uint32               `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Header               string               `protobuf:"bytes,2,opt,name=Header,proto3" json:"Header,omitempty"`
	Content              string               `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
	CreationDate         *timestamp.Timestamp `protobuf:"bytes,4,opt,name=CreationDate,proto3" json:"CreationDate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *NewsItem) Reset()         { *m = NewsItem{} }
func (m *NewsItem) String() string { return proto.CompactTextString(m) }
func (*NewsItem) ProtoMessage()    {}
func (*NewsItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_f385611097ab4843, []int{0}
}

func (m *NewsItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewsItem.Unmarshal(m, b)
}
func (m *NewsItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewsItem.Marshal(b, m, deterministic)
}
func (m *NewsItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewsItem.Merge(m, src)
}
func (m *NewsItem) XXX_Size() int {
	return xxx_messageInfo_NewsItem.Size(m)
}
func (m *NewsItem) XXX_DiscardUnknown() {
	xxx_messageInfo_NewsItem.DiscardUnknown(m)
}

var xxx_messageInfo_NewsItem proto.InternalMessageInfo

func (m *NewsItem) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *NewsItem) GetHeader() string {
	if m != nil {
		return m.Header
	}
	return ""
}

func (m *NewsItem) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *NewsItem) GetCreationDate() *timestamp.Timestamp {
	if m != nil {
		return m.CreationDate
	}
	return nil
}

type NewsRequest struct {
	ID                   uint32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewsRequest) Reset()         { *m = NewsRequest{} }
func (m *NewsRequest) String() string { return proto.CompactTextString(m) }
func (*NewsRequest) ProtoMessage()    {}
func (*NewsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f385611097ab4843, []int{1}
}

func (m *NewsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewsRequest.Unmarshal(m, b)
}
func (m *NewsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewsRequest.Marshal(b, m, deterministic)
}
func (m *NewsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewsRequest.Merge(m, src)
}
func (m *NewsRequest) XXX_Size() int {
	return xxx_messageInfo_NewsRequest.Size(m)
}
func (m *NewsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewsRequest proto.InternalMessageInfo

func (m *NewsRequest) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func init() {
	proto.RegisterType((*NewsItem)(nil), "proto.NewsItem")
	proto.RegisterType((*NewsRequest)(nil), "proto.NewsRequest")
}

func init() { proto.RegisterFile("news-storage-service.proto", fileDescriptor_f385611097ab4843) }

var fileDescriptor_f385611097ab4843 = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8f, 0xcd, 0x4a, 0xc4, 0x30,
	0x14, 0x85, 0x49, 0xd5, 0x51, 0x6f, 0xfd, 0x81, 0x2c, 0x24, 0x14, 0xc4, 0x32, 0xab, 0x6e, 0x26,
	0x03, 0x75, 0xef, 0x66, 0x0a, 0x4e, 0x37, 0x2e, 0x3a, 0xbe, 0x40, 0x46, 0x8f, 0xa5, 0x60, 0x9b,
	0x31, 0xb9, 0xe3, 0xbc, 0x84, 0x0f, 0x2d, 0x6d, 0xac, 0x54, 0x57, 0xe1, 0xcb, 0x39, 0x24, 0xdf,
	0xa1, 0xa4, 0xc3, 0xc1, 0x2f, 0x3c, 0x5b, 0x67, 0x6a, 0x2c, 0x3c, 0xdc, 0x67, 0xf3, 0x02, 0xbd,
	0x73, 0x96, 0xad, 0x3c, 0x19, 0x8e, 0xe4, 0xae, 0xb6, 0xb6, 0x7e, 0xc7, 0x72, 0xa0, 0xed, 0xfe,
	0x6d, 0xc9, 0x4d, 0x0b, 0xcf, 0xa6, 0xdd, 0x85, 0xde, 0xfc, 0x4b, 0xd0, 0xd9, 0x13, 0x0e, 0xbe,
	0x64, 0xb4, 0xf2, 0x8a, 0xa2, 0xb2, 0x50, 0x22, 0x15, 0xd9, 0x65, 0x15, 0x95, 0x85, 0xbc, 0xa1,
	0xd9, 0x1a, 0xe6, 0x15, 0x4e, 0x45, 0xa9, 0xc8, 0xce, 0xab, 0x1f, 0x92, 0x8a, 0x4e, 0x57, 0xb6,
	0x63, 0x74, 0xac, 0x8e, 0x86, 0x60, 0x44, 0xf9, 0x40, 0x17, 0x2b, 0x07, 0xc3, 0x8d, 0xed, 0x0a,
	0xc3, 0x50, 0xc7, 0xa9, 0xc8, 0xe2, 0x3c, 0xd1, 0x41, 0x43, 0x8f, 0x1a, 0xfa, 0x79, 0xd4, 0xa8,
	0xfe, 0xf4, 0xe7, 0xb7, 0x14, 0xf7, 0x36, 0x15, 0x3e, 0xf6, 0xf0, 0xfc, 0x5f, 0x28, 0x5f, 0x93,
	0xec, 0xe3, 0x4d, 0x98, 0xbc, 0x09, 0x8b, 0x65, 0x4e, 0xf1, 0x23, 0xf8, 0x77, 0x85, 0x0c, 0xdf,
	0xe8, 0xc9, 0x43, 0xc9, 0xf5, 0xe4, 0xae, 0x2f, 0x6d, 0x67, 0x03, 0xdf, 0x7f, 0x07, 0x00, 0x00,
	0xff, 0xff, 0xf8, 0x57, 0xa1, 0xad, 0x44, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NewsStorageServiceClient is the client API for NewsStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NewsStorageServiceClient interface {
	GetNewsItem(ctx context.Context, in *NewsRequest, opts ...grpc.CallOption) (*NewsItem, error)
}

type newsStorageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNewsStorageServiceClient(cc grpc.ClientConnInterface) NewsStorageServiceClient {
	return &newsStorageServiceClient{cc}
}

func (c *newsStorageServiceClient) GetNewsItem(ctx context.Context, in *NewsRequest, opts ...grpc.CallOption) (*NewsItem, error) {
	out := new(NewsItem)
	err := c.cc.Invoke(ctx, "/proto.NewsStorageService/GetNewsItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NewsStorageServiceServer is the server API for NewsStorageService service.
type NewsStorageServiceServer interface {
	GetNewsItem(context.Context, *NewsRequest) (*NewsItem, error)
}

// UnimplementedNewsStorageServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNewsStorageServiceServer struct {
}

func (*UnimplementedNewsStorageServiceServer) GetNewsItem(ctx context.Context, req *NewsRequest) (*NewsItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewsItem not implemented")
}

func RegisterNewsStorageServiceServer(s *grpc.Server, srv NewsStorageServiceServer) {
	s.RegisterService(&_NewsStorageService_serviceDesc, srv)
}

func _NewsStorageService_GetNewsItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsStorageServiceServer).GetNewsItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NewsStorageService/GetNewsItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsStorageServiceServer).GetNewsItem(ctx, req.(*NewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NewsStorageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NewsStorageService",
	HandlerType: (*NewsStorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNewsItem",
			Handler:    _NewsStorageService_GetNewsItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "news-storage-service.proto",
}
